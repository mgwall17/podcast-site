#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const { parseStaticMarkdownFile, generateStaticPageComponent, generateHomeSectionsData } = require('../src/utils/staticContentProcessor');

// Configuration
const CONTENT_MARKDOWN_DIR = path.join(__dirname, '..', 'content-markdown');
const PAGES_DIR = path.join(CONTENT_MARKDOWN_DIR, 'pages');
const SECTIONS_DIR = path.join(CONTENT_MARKDOWN_DIR, 'sections');
const SRC_PAGES_DIR = path.join(__dirname, '..', 'src', 'pages');
const HOME_DATA_FILE = path.join(__dirname, '..', 'src', 'utils', 'homeData.js');

// Ensure directories exist
if (!fs.existsSync(CONTENT_MARKDOWN_DIR)) {
  fs.mkdirSync(CONTENT_MARKDOWN_DIR, { recursive: true });
  console.log(`Created content markdown directory: ${CONTENT_MARKDOWN_DIR}`);
}

if (!fs.existsSync(PAGES_DIR)) {
  fs.mkdirSync(PAGES_DIR, { recursive: true });
  console.log(`Created pages directory: ${PAGES_DIR}`);
}

if (!fs.existsSync(SECTIONS_DIR)) {
  fs.mkdirSync(SECTIONS_DIR, { recursive: true });
  console.log(`Created sections directory: ${SECTIONS_DIR}`);
}

// Function to process static pages
function processStaticPages() {
  console.log('üìÑ Processing static pages from markdown...');
  
  if (!fs.existsSync(PAGES_DIR)) {
    console.log('No pages directory found, skipping static page generation');
    return;
  }

  const pageFiles = fs.readdirSync(PAGES_DIR)
    .filter(file => file.endsWith('.md'));

  console.log(`Found ${pageFiles.length} page files to process`);

  pageFiles.forEach(file => {
    const filePath = path.join(PAGES_DIR, file);
    const pageData = parseStaticMarkdownFile(filePath);
    
    if (!pageData) {
      console.log(`‚ùå Failed to parse ${file}`);
      return;
    }

    console.log(`\nüìù Processing page: ${file}`);
    
    // Determine page type for specialized generation
    const pageType = pageData.filename;
    const componentCode = generateStaticPageComponent(pageData, pageType);
    
    // Generate component filename (capitalize first letter)
    const componentName = pageData.filename.charAt(0).toUpperCase() + pageData.filename.slice(1);
    const componentPath = path.join(SRC_PAGES_DIR, `${componentName}.js`);
    
    fs.writeFileSync(componentPath, componentCode);
    console.log(`‚úÖ Generated component: ${componentPath}`);
  });
}

// Function to process home page sections
function processHomeSections() {
  console.log('\nüè† Processing home page sections...');
  
  const sectionsData = generateHomeSectionsData(SECTIONS_DIR);
  
  if (Object.keys(sectionsData).length === 0) {
    console.log('No sections found, skipping home data generation');
    return;
  }

  console.log(`Found ${Object.keys(sectionsData).length} sections to process`);

  // Generate home data file
  const homeDataTemplate = `// Auto-generated from content-markdown/sections/
// Do not edit this file directly - edit the markdown files instead

export const homePageData = ${JSON.stringify(sectionsData, null, 2)};

// Structured data for home page
export const homeStructuredData = {
  "@context": "https://schema.org",
  "@type": "WebSite",
  "name": "Horror Glass Podcast",
  "description": "Horror Glass Podcast is all about unmasking the fears that resonate on a personal level. Join Jose Zaragoza as he explores the psychological impact of horror films with diverse guests.",
  "url": "https://horrorglassPodcast.com",
  "author": {
    "@type": "Person",
    "name": "Jose Zaragoza"
  },
  "publisher": {
    "@type": "Organization",
    "name": "Horror Glass Podcast",
    "logo": {
      "@type": "ImageObject",
      "url": "https://horrorglassPodcast.com/HPG_Logo_Purple.png"
    }
  },
  "potentialAction": {
    "@type": "SearchAction",
    "target": "https://horrorglassPodcast.com/episodes?search={search_term_string}",
    "query-input": "required name=search_term_string"
  },
  "sameAs": [
    "https://open.spotify.com/show/2TTfdtQ83xCbaSlv1yVdTt"
  ]
};

// Helper functions for home page content
export const getHeroData = () => homePageData.hero || {};
export const getIntroductionData = () => homePageData.introduction || {};
export const getFeaturesData = () => homePageData.features || {};
export const getSubscribeData = () => homePageData.subscribe || {};
`;

  fs.writeFileSync(HOME_DATA_FILE, homeDataTemplate);
  console.log(`‚úÖ Generated home data: ${HOME_DATA_FILE}`);
  
  Object.keys(sectionsData).forEach(sectionName => {
    console.log(`   - ${sectionName}`);
  });
}

// Function to update home page component to use markdown data
function updateHomePageComponent() {
  console.log('\nüè† Updating home page component...');
  
  const homePagePath = path.join(SRC_PAGES_DIR, 'index.js');
  
  if (!fs.existsSync(homePagePath)) {
    console.log('Home page component not found, skipping update');
    return;
  }

  // Generate updated home page component that uses markdown data
  const updatedHomeComponent = `/* eslint-disable react/no-unescaped-entities */
import { Heading, Container, Hide, Center, HStack, StackDivider, VStack, Stack, Text, Box, Button, SimpleGrid } from '@chakra-ui/react'
import { MoonIcon, ExternalLinkIcon } from '@chakra-ui/icons'
import Link from 'next/link'
import SEO from '../components/SEO'
import { homePageData, homeStructuredData } from '../utils/homeData'

export default function Home() {
  const hero = homePageData.hero || {};
  const introduction = homePageData.introduction || {};
  const features = homePageData.features || {};
  const subscribe = homePageData.subscribe || {};

  return (
    <>
      <SEO
        title="Horror Glass Podcast - Exploring the Psychology of Horror Films"
        description="Horror Glass Podcast is all about unmasking the fears that resonate on a personal level. Join Jose Zaragoza as he explores the psychological impact of horror films with diverse guests."
        keywords="horror podcast, horror movies, psychological horror, film analysis, Jose Zaragoza, horror film discussions"
        structuredData={homeStructuredData}
        canonical="https://horrorglassPodcast.com"
      />

      <Container maxW="6xl" as="main">
        <Stack spacing={8}>
          {/* Hero Section */}
          <Box as="section" textAlign="center" py={8}>
            <Heading 
              as="h1" 
              size="2xl" 
              mb={6}
              lineHeight="shorter"
            >
              {hero.title || "Welcome to the Horror Glass Podcast"}
            </Heading>
            
            <Hide below="lg">
              <Center mt={4} mb={6}>
                <Box 
                  as="img" 
                  src={hero.logo?.src || "/HPG_Logo_Purple.png"}
                  width={hero.logo?.width || "200px"}
                  height={hero.logo?.height || "200px"}
                  alt={hero.logo?.alt || "Horror Glass Podcast Logo"}
                  loading="eager"
                />
              </Center>
            </Hide>

            {/* Call to Action Buttons */}
            <HStack spacing={4} justify="center" mt={6}>
              <Button 
                as={Link}
                href={hero.callToAction?.primary?.href || "/Episodes"}
                colorScheme={hero.callToAction?.primary?.colorScheme || "purple"}
                size="lg"
              >
                {hero.callToAction?.primary?.text || "Listen to Episodes"}
              </Button>
              <Button 
                as={Link}
                href={hero.callToAction?.secondary?.href || "/Blog"}
                variant={hero.callToAction?.secondary?.variant || "outline"}
                colorScheme={hero.callToAction?.secondary?.colorScheme || "purple"}
                size="lg"
              >
                {hero.callToAction?.secondary?.text || "View Blog"}
              </Button>
            </HStack>
          </Box>

          {/* Introduction Section */}
          <Box as="section" aria-labelledby="introduction">
            <Center>
              <VStack 
                divider={<StackDivider borderColor="gray.600" />}
                spacing={6}
                align="stretch" 
                maxW="4xl"
                p={[4, 6, 8]}
              >
                <Box textAlign="center">
                  <Heading 
                    id="introduction"
                    as="h2" 
                    size="xl" 
                    mb={4}
                    color="purple.400"
                  >
                    {introduction.title || "Calling All Horror Fans!"}
                  </Heading> 
                  <Text fontSize="lg" lineHeight="tall" color="gray.300">
                    {introduction.description || "My name is Jose Zaragoza, and as a fellow lover of all things scary, I'm thrilled to invite you on a journey through the world of horror movies."}
                  </Text>
                </Box>

                <Heading 
                  as="h2" 
                  size="lg" 
                  textAlign="center"
                  color="purple.400"
                  id="about-section"
                >
                  {introduction.aboutTitle || "So what is Horror Glass about?"}
                </Heading>
              </VStack>
            </Center>
          </Box>

          {/* Features Section */}
          <Box as="section" aria-labelledby="about-section">
            <SimpleGrid columns={[1, 1, 2]} spacing={8} maxW="6xl" mx="auto">
              {(features.features || []).map((feature, index) => (
                <Box 
                  key={index}
                  as="article"
                  p={6}
                  borderRadius="lg"
                  bg="gray.800"
                  _hover={{ bg: "gray.700" }}
                  transition="background 0.2s"
                >
                  <HStack mb={4}>
                    <MoonIcon color="purple.400" boxSize={6} />
                    <Heading as="h3" size="md" color="purple.300">
                      {feature.title}
                    </Heading>
                  </HStack>
                  <Text lineHeight="tall" color="gray.300">
                    {feature.description}
                  </Text>
                </Box>
              ))}
            </SimpleGrid>
          </Box>

          {/* Subscribe Section */}
          <Box 
            as="section" 
            textAlign="center" 
            py={8}
            bg="gray.800"
            borderRadius="lg"
            aria-labelledby="subscribe-section"
          >
            <Heading 
              id="subscribe-section"
              as="h2" 
              size="lg" 
              mb={4}
              color="purple.300"
            >
              {subscribe.title || "Ready to Dive Into Horror?"}
            </Heading>
            <Text fontSize="lg" mb={6} color="gray.300" maxW="2xl" mx="auto">
              {subscribe.description || "Start your journey with our latest episodes and discover the psychological depths of your favorite horror films."}
            </Text>
            <HStack spacing={4} justify="center" wrap="wrap">
              <Button 
                as="a"
                href={subscribe.callToAction?.primary?.href || "https://open.spotify.com/show/2TTfdtQ83xCbaSlv1yVdTt"}
                target={subscribe.callToAction?.primary?.external ? "_blank" : undefined}
                rel={subscribe.callToAction?.primary?.external ? "noopener noreferrer" : undefined}
                colorScheme={subscribe.callToAction?.primary?.colorScheme || "green"}
                size="lg"
                rightIcon={subscribe.callToAction?.primary?.icon === "ExternalLinkIcon" ? <ExternalLinkIcon /> : undefined}
                aria-label={subscribe.callToAction?.primary?.ariaLabel || "Listen on Spotify"}
              >
                {subscribe.callToAction?.primary?.text || "Listen on Spotify"}
              </Button>
              <Button 
                as={Link}
                href={subscribe.callToAction?.secondary?.href || "/Episodes"}
                colorScheme={subscribe.callToAction?.secondary?.colorScheme || "purple"}
                variant={subscribe.callToAction?.secondary?.variant || "outline"}
                size="lg"
              >
                {subscribe.callToAction?.secondary?.text || "Browse All Episodes"}
              </Button>
            </HStack>
          </Box>
        </Stack>
      </Container>
    </>
  )
}`;

  fs.writeFileSync(homePagePath, updatedHomeComponent);
  console.log(`‚úÖ Updated home page component: ${homePagePath}`);
}

// Main function to process all static content
function processStaticContent() {
  console.log('üöÄ Starting static content generation from markdown files...');
  
  try {
    processStaticPages();
    processHomeSections();
    updateHomePageComponent();
    
    console.log('\nüéâ Static content generation complete!');
  } catch (error) {
    console.error('‚ùå Error during static content generation:', error);
    process.exit(1);
  }
}

// Run the script
if (require.main === module) {
  processStaticContent();
}

module.exports = { processStaticContent };
